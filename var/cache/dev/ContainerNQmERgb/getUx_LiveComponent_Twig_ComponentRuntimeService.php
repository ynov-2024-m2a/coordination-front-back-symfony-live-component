<?php

namespace ContainerNQmERgb;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUx_LiveComponent_Twig_ComponentRuntimeService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'ux.live_component.twig.component_runtime' shared service.
     *
     * @return \Symfony\UX\LiveComponent\Twig\LiveComponentRuntime
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/ux-live-component/src/Twig/LiveComponentRuntime.php';

        $a = ($container->privates['ux.live_component.component_hydrator'] ?? $container->load('getUx_LiveComponent_ComponentHydratorService'));

        if (isset($container->privates['ux.live_component.twig.component_runtime'])) {
            return $container->privates['ux.live_component.twig.component_runtime'];
        }
        $b = ($container->privates['ux.twig_component.component_factory'] ?? $container->load('getUx_TwigComponent_ComponentFactoryService'));

        if (isset($container->privates['ux.live_component.twig.component_runtime'])) {
            return $container->privates['ux.live_component.twig.component_runtime'];
        }
        $c = ($container->privates['stimulus.helper'] ?? self::getStimulus_HelperService($container));

        if (isset($container->privates['ux.live_component.twig.component_runtime'])) {
            return $container->privates['ux.live_component.twig.component_runtime'];
        }

        return $container->privates['ux.live_component.twig.component_runtime'] = new \Symfony\UX\LiveComponent\Twig\LiveComponentRuntime($a, $b, ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['ux.live_component.metadata_factory'] ?? $container->load('getUx_LiveComponent_MetadataFactoryService')), $c);
    }
}
